// Simple types
let x: int

print x

// Tuples
let y: [float, c: char]

// Accessing by index and by name (where provided)
print y.0
print y.1  // Same as y.c
print y.c  // Same as y.1

// Algebraic data types with "mixed"
let z: mixed [Some: int, None: void]

print z // Error?

// Pattern matching on mixed types
narrow z [
	Some -> {
		// In this scope z is an int
		print z
	},
	None -> {
		// In this scope z is void
		print "none"
	}
]

// Typedefs
type OptInt: mixed [Some: int, None: void]
let zz: OptInt

// Typedefs can have generics
// type Opt[T]: mixed [Some: T, None]

type MyType: mixed [Int: int, Float: float, Char: char]
let myvar: MyType

narrow myvar [
	Int -> {
		// myvar is int
	}
	default -> {
		// myvar is still MyType, because this is the default case
	}
]
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; 
; Guessing Game
; 
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

globalstr %S1 "Input a guess (0-100): "
globalstr %S2 "That is too high"
globalstr %S3 "That is too low"
globalstr %S4 "Correct!"

@RNG					; Stack: BP, IP, word seed
	loadw W0, BP, 8		; seed
	movw W2, 101		; modulus
	movw W3, 37			; multiplier
	movw W4, 2719		; offset
	movw W5, 10			; iters

	imod W0, W0, W2
	@RNG_LOOP
		imul W0, W0, W3
		iadd W0, W0, W4
		imod W0, W0, W2

		idec W5
		jmpnz @RNG_LOOP

	loadw W1, BP, 4
	rjmp W1


@PARSE_NUM				; Stack: BP, IP, char* str, word base
	loadw W1, BP, 8		; str
	loadw W2, BP, 12	; base
	movw W3, 48			; char '0'
	; movw W4, 65			; char 'A'
	; movw W7, 17			; char 'A' - char '0'
	
	movw W5, 0			; counter

	@PARSE_NUM_LOOP
		loadb B1, W1, 0		; current char
		cflag B1
		jmpz @PARSE_NUM_LOOP_END	; jump if zero, meaning null termination of string

		imul W5, W5, W2		; shift by base

		ctoi W6, B1			; to word
		isub W6, W6, W3		; subtract '0'
		iadd W5, W5, W6		; add to live count
		iinc W1
		jmp @PARSE_NUM_LOOP

		@PARSE_NUM_LOOP_END

	rmovw W0, W5
	loadw W1, BP, 4
	rjmp W1

@__START__
time W2						; time in W2
movw W0, @AFTER_RNG
storew BP, 4, W0			; Pass return IP as argument
storew BP, 8, W2			; Pass seed as argument
jmp @RNG					; Call rnjesus
@AFTER_RNG
rmovw W2, W0				; random number in W2
prntln

movw W0, 0x100				; Size of input space
alloc W1, W0				; Allocate input space

@INPUT_LOOP
	prntstr PP, %S1				; Ask for input
	readstr W1, 0				; Read user input
	storew BP, 0, W1			; Save input space address on stack
	storew BP, 4, W2			; Save rng on stack
	storew BP, 8, BP			; Save BP on stack
	movw W0, 8
	iadd BP, BP, W0				; Move BP by 4 to create new stack frame
	movw W0, @AFTER_PARSE_NUM
	storew BP, 4, W0			; Pass return IP as argument
	storew BP, 8, W1			; Pass input space address as argument
	movw W0, 10
	storew BP, 12, W0			; Pass base (const 10) as argument
	jmp @PARSE_NUM				; Call number parser
	@AFTER_PARSE_NUM
	loadw BP, BP, 0				; Return to stack frame
	loadw W1, BP, 0				; Reload input space address
	loadw W2, BP, 4				; Reload rng address
	icmpeq W0, W2
	jmpnz @END
	icmpgt W0, W2
	jmpz @TOO_SMALL
	@TOO_BIG
	prntstr PP, %S2
	prntln
	jmp @INPUT_LOOP
	@TOO_SMALL
	prntstr PP, %S3
	prntln
	jmp @INPUT_LOOP

@END
prntstr PP, %S4
free W1						; Free input space